// Topics (example):
// -> "rtkq/request"
// <- "rtkq/response"

// Common
export type RtkqTopic = "rtkq/request" | "rtkq/response";

export type RtkqRequestBase = {
  kind: "query" | "mutation";
  endpoint: string; // e.g. "getUser"
  requestId: string; // generated by caller
};

export type QueryOptions = {
  subscribe?: boolean; // default true (stream updates)
  refetchOnMountOrArgChange?: boolean | number;
  refetchOnFocus?: boolean;
  refetchOnReconnect?: boolean;
  pollingInterval?: number;
  preferCacheValue?: boolean; // if true, return cached value immediately if any
  timeoutMs?: number; // optional safety timeout on caller side
};

export type RtkqQueryRequest = RtkqRequestBase & {
  kind: "query";
  arg: unknown; // must be JSON-serializable
  options?: QueryOptions;
  action?: "start" | "refetch" | "unsubscribe" | "cancel"; // control actions
};

export type RtkqMutationRequest = RtkqRequestBase & {
  kind: "mutation";
  arg: unknown;
};

export type RtkqResponse =
  | {
      type: "data";
      requestId: string;
      meta?: { isFetching: boolean; fulfilledTimeStamp?: number };
      payload: unknown;
    }
  | {
      type: "error";
      requestId: string;
      meta?: { isFetching: boolean };
      error: { message?: string; status?: number; details?: unknown };
    }
  | {
      type: "done"; // bridge ended stream (unsubscribe/cancel/idle)
      requestId: string;
    };
